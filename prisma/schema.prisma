generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("MONGODB_URI")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  clerkId String @unique
  username String @unique
  firstName String
  lastName String
  imageUrl String?
  manager String? @default("")
  role Role @default(AGENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  points Int @default(0)
  lifetimePoints Int @default(0)
  pointLogs PointLog[]
  rewardsRedeemed RewardLog[]
  categoryStats CategoryStat[]

  @@map("users")
}

model Category{
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String   
  description   String?
  image         String?
  quizzes       Quiz[]
  categoryStats CategoryStat[]
}

model Quiz {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String?
  image           String?
  categoryId      String    @db.ObjectId
  category        Category  @relation(fields: [categoryId], references: [id])
  questions       Question[]
  lastAttempt     DateTime?
}

model Question {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  text            String
  imageUrl        String?
  quizId          String    @db.ObjectId
  difficulty      String?
  quiz            Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[]
}

//Answers
model Option{
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  text            String
  isCorrect       Boolean
  questionId      String    @db.ObjectId
  question        Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model CategoryStat {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  categoryId    String   @db.ObjectId
  category      Category @relation(fields: [categoryId], references: [id])
  attempts      Int @default(0) //Total attempts in this category
  completed     Int @default(0) //Total completed quizzes in this category
  averageScore  Float? 
  lastAttempt   DateTime? //Last attempt in this category

  @@unique([userId, categoryId])
}

model PointLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  amount    Int
  reason    String //Reason for awarding points
  createdAt DateTime @default(now())
}

model Reward {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  prize     String
  description String?
  cost      Int
  imageUrl  String?
  featured  Boolean @default(false)
  enabled   Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rewardLogs RewardLog[]
}

model RewardLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  rewardId  String   @db.ObjectId
  reward    Reward   @relation(fields: [rewardId], references: [id])
  redeemed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  AGENT
  MANAGER
  OPERATIONS 
}